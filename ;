use std::{
    ffi::{c_void, CString},
    fmt::{self, Debug},
    ptr::null,
};

use glfw::Context;

use crate::{
    core::{
        components::{RenderComponent, TransformComponent},
        engine::{EntityManager, EntityManagerRef, SystemEvent},
        system::{SysResult, SystemTrait},
    },
    renderer::window::{init_window, GlfwWindowContext},
};

pub struct RenderSystem {
    window_context: Option<GlfwWindowContext>,
}

impl Debug for RenderSystem {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str("RenderSystem is undebuggable")
    }
}

impl SystemTrait for RenderSystem {
    fn init(&mut self) {
        //Setup the windows

        let window = init_window();
        self.window_context = Some(window);
    }

    fn step(&mut self, _time: usize, _entities: &EntityManagerRef) -> SysResult<Vec<SystemEvent>> {
        let GlfwWindowContext {
            window,
            glfw,
            events,
        } = self.window_context.as_mut().unwrap();

        if window.should_close() {
            return Ok(vec![SystemEvent::ShutdownEngine]);
        }

        unsafe {
            gl::ClearColor(0.1f32, 0.4f32, 0.1f32, 1.0f32);
            gl::Clear(gl::COLOR_BUFFER_BIT);
            draw_simple_triangle();
        }

        window.swap_buffers();
        glfw.poll_events();

        for (_, event) in glfw::flush_messages(events) {
            println!("{:?}", event);
        }

        Ok(vec![])
    }
}

static VERTEX_SHADER_SOURCE: &str = r#"
    #version 330 core
    layout (location = 0) in vec3 aPos;

    void main() {
        gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
    }
"#;

static FRAGMENT_SHADER_SOURCE: &str = r#"
    #version 330 core
    out vec4 FragColor;

    void main() {
        FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);
    }
"#;

unsafe fn draw_simple_triangle() {
    let vertices = [-0.5, -0.5, 0.0, 0.5, -0.5, 0.0, 0.0, 0.5, 0.0f32];
    let mut vbo = 0;
    gl::GenBuffers(1, &mut vbo);
    gl::BindBuffer(gl::ARRAY_BUFFER, vbo);
    gl::BufferData(
        gl::ARRAY_BUFFER,
        std::mem::size_of_val(&vertices) as isize,
        &vertices as *const f32 as *mut c_void,
        gl::STATIC_DRAW,
    );

    //Compiling the vertext shader
    let vertex_shader = gl::CreateShader(gl::VERTEX_SHADER);
    let shader_string = CString::new(VERTEX_SHADER_SOURCE).unwrap();
    gl::ShaderSource(vertex_shader, 1, &shader_string.as_ptr(), null());
    gl::CompileShader(vertex_shader);

    let fragment_shader = gl::CreateShader(gl::FRAGMENT_SHADER);
    let shader_string = CString::new(FRAGMENT_SHADER_SOURCE).unwrap();
    gl::ShaderSource(fragment_shader, 1, &shader_string.as_ptr(), null());
    gl::CompileShader(fragment_shader);

    let shader_program = gl::CreateProgram();
    gl::AttachShader(shader_program, vertex_shader);
    gl::AttachShader(shader_program, fragment_shader);
    gl::LinkProgram(shader_program);

    gl:UseProgram(shader_program);
}

//TODO: (teddy) Initialize glfw and opengl

impl RenderSystem {
    pub fn new() -> Self {
        Self {
            window_context: None,
        }
    }
}

impl EntityManager {
    //NOTE: (teddy) We could use an iterator for lazy the operation instead
    //Of allocating an entire chunk of memory for
    fn fetch_render_components(&self) -> (RenderComponent, TransformComponent) {
        unimplemented!()
    }
}
